---
# Source: api-server/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: garden-api
  labels:
    helm.sh/chart: api-server-0.1.0
    app.kubernetes.io/name: garden-api
    app.kubernetes.io/instance: garden-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    tags.ohou.se/role: api
    tags.ohou.se/service-name: garden-api
    tags.ohou.se/service-owner: contents
    tags.ohou.se/env: staging
    tags.ohou.se/service: garden-api
    tags.ohou.se/version: "test"
---
# Source: api-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: garden-api
  labels:
    helm.sh/chart: api-server-0.1.0
    app.kubernetes.io/name: garden-api
    app.kubernetes.io/instance: garden-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    tags.ohou.se/role: api
    tags.ohou.se/service-name: garden-api
    tags.ohou.se/service-owner: contents
    tags.ohou.se/env: staging
    tags.ohou.se/service: garden-api
    tags.ohou.se/version: "test"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
    - port: 50051
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: garden-api
    app.kubernetes.io/instance: garden-api
---
# Source: api-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: garden-api
  labels:
    helm.sh/chart: api-server-0.1.0
    app.kubernetes.io/name: garden-api
    app.kubernetes.io/instance: garden-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    tags.ohou.se/role: api
    tags.ohou.se/service-name: garden-api
    tags.ohou.se/service-owner: contents
    tags.ohou.se/env: staging
    tags.ohou.se/service: garden-api
    tags.ohou.se/version: "test"
spec:
  replicas: 1
  revisionHistoryLimit: 2
  strategy:
    rollingUpdate:
      maxSurge: 10%
      maxUnavailable: 0%
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: garden-api
      app.kubernetes.io/instance: garden-api
  template:
    metadata:
      annotations:
        ad.datadoghq.com/api-server.logs: |
          [
            {
              "source": "ohouse-server",
              "service": "garden-api",
              "log_processing_rules": [{
                "type": "multi_line",
                "name": "new_log_start_pattern",
                "pattern": "^"
              }],
              "tags": [
                "role:api",
                "servicename:garden-api",
                "serviceowner:contents",
                "service:garden-api",
                "env:staging",
                "version:test"
              ]
            }
          ]
        checksum/db-secret: 352c31146956763c8a9540d1180be1ac355bcc8cc13b7c78406429276acfbd51
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "5"
        ad.datadoghq.com/linkerd-proxy.check_names: '["linkerd"]'
        ad.datadoghq.com/linkerd-proxy.init_configs: '[{}]'
        ad.datadoghq.com/linkerd-proxy.instances: '[{"openmetrics_endpoint": "http://%%host%%:4191/metrics"}]'
      labels:
        app.kubernetes.io/name: garden-api
        app.kubernetes.io/instance: garden-api
        tags.ohou.se/role: api
        tags.ohou.se/service-name: garden-api
        tags.ohou.se/service-owner: contents
        tags.ohou.se/env: staging
        tags.ohou.se/service: garden-api
        tags.ohou.se/version: "test"
    spec:
      serviceAccountName: garden-api
      securityContext:
        {}
      containers:
        - name: api-server
          securityContext:
            {}
          image: "387471694114.dkr.ecr.ap-northeast-2.amazonaws.com/contents/garden-api:test"
          imagePullPolicy: Always
          env:
            - name: APP_PROFILE
              value: stage
            - name: OHOUSE_SERVICE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.ohou.se/service']
            - name: OHOUSE_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.ohou.se/env']
            - name: OHOUSE_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.ohou.se/version']
            - name: JAVA_TOOL_OPTIONS
              value: -javaagent:/app/dd-java-agent.jar
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.ohou.se/service']
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.ohou.se/env']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.ohou.se/version']
            - name: DD_LOGS_INJECTION
              value: "true"
          envFrom:
            - secretRef:
                name: garden-api-db-secret
          lifecycle:
            preStop:
              exec:
                command:
                  - sleep
                  - "5"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 50051
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - /bin/grpc_health_probe
              - -addr=:50051
            initialDelaySeconds: 30
          readinessProbe:
            exec:
              command:
              - /bin/grpc_health_probe
              - -addr=:50051
            initialDelaySeconds: 10
          resources:
            limits:
              cpu: 1
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
---
# Source: api-server/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: garden-api
  labels:
    helm.sh/chart: api-server-0.1.0
    app.kubernetes.io/name: garden-api
    app.kubernetes.io/instance: garden-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    tags.ohou.se/role: api
    tags.ohou.se/service-name: garden-api
    tags.ohou.se/service-owner: contents
    tags.ohou.se/env: staging
    tags.ohou.se/service: garden-api
    tags.ohou.se/version: "test"
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: "garden.stage.dailyhou.se"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: garden-api
                port:
                  number: 80
---
# Source: api-server/templates/secrets/db-secret.yaml
apiVersion: kubernetes-client.io/v1
kind: ExternalSecret
metadata:
  name: garden-api-db-secret
  labels:
    helm.sh/chart: api-server-0.1.0
    app.kubernetes.io/name: garden-api
    app.kubernetes.io/instance: garden-api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    tags.ohou.se/role: api
    tags.ohou.se/service-name: garden-api
    tags.ohou.se/service-owner: contents
    tags.ohou.se/env: staging
    tags.ohou.se/service: garden-api
    tags.ohou.se/version: "test"
spec:
  backendType: secretsManager
  data:
  - key: ohs/db/bucketplace_production/stage
    name: writeDBSecret
  - key: ohs/db/bucketplace_production/stage
    name: readDBSecret
  template:
    data:
      DB_WRITE_HOST: |-
        <% let s = JSON.parse(data.writeDBSecret) %><%= Buffer.from(`jdbc:mysql://${s.host}:${s.port}/${s.dbname}?characterEncoding=UTF-8&serverTimezone=Asia/Seoul&enabledTLSProtocols=TLSv1.2`).toString("base64") %>
      DB_WRITE_USER: |-
        <%= Buffer.from(JSON.parse(data.writeDBSecret).username).toString("base64") %>
      DB_WRITE_PASSWORD: |-
        <%= Buffer.from(JSON.parse(data.writeDBSecret).password).toString("base64") %>
      DB_READ_HOST: |-
        <% let s = JSON.parse(data.readDBSecret) %><%= Buffer.from(`jdbc:mysql://${s.host}:${s.port}/${s.dbname}?characterEncoding=UTF-8&serverTimezone=Asia/Seoul&enabledTLSProtocols=TLSv1.2`).toString("base64") %>
      DB_READ_USER: |-
        <%= Buffer.from(JSON.parse(data.readDBSecret).username).toString("base64") %>
      DB_READ_PASSWORD: |-
        <%= Buffer.from(JSON.parse(data.readDBSecret).password).toString("base64") %>
